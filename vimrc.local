set nospell
set lines&
set wrap
set breakindent
set showbreak=»
"set showbreak=›
"set showbreak=•
set breakindentopt=shift:2,min:30,sbr
set foldmethod=syntax
"set foldmethod=indent
set nofoldenable

if has("macunix")
    set guifont=SF\ Mono:h12
elseif has("unix")
    set guifont=Ubuntu\ Mono\ 13
else
    " Use default
endif

set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R


if isdirectory(expand("~/.vim/bundle/Monota"))
    nnoremap <Leader>scd :MonotaSetDarkColorScheme<CR>
    nnoremap <Leader>scl :MonotaSetLightColorScheme<CR>

    call monota#SetColorScheme('dark')
endif

nnoremap <Leader>ta :set completeopt+=preview<CR>
nnoremap <Leader>at :set completeopt-=preview<CR>

inoremap jk <ESC>

nnoremap <Leader>88 :set cc=80<CR>
nnoremap <Leader>89 :set cc=<CR>

nnoremap <Leader>ae :let w:airline_skip_empty_sections = 1<CR>
nnoremap <Leader>ea :let w:airline_skip_empty_sections = 0<CR>
nnoremap <Leader>aa :AirlineRefresh<CR>

autocmd FileType haskell,puppet,ruby,yml setlocal expandtab shiftwidth=4 softtabstop=4


if isdirectory(expand("~/.vim/bundle/nerdtree"))
    unmap <C-e>
    nnoremap <Leader>ee :NERDTreeTabsToggle<CR>
endif


if isdirectory(expand("~/.vim/bundle/syntastic")) && executable("flake8")
    function! ChangePythonFlake8Exe(flake8Exec)
        let g:syntastic_python_flake8_exe = a:flake8Exec . " -m flake8"
    endfunction

    command! -nargs=1 ChangePythonFlake8ExePy call ChangePythonFlake8Exe(<f-args>)

    if executable("/usr/local/bin/python2")
        command! ChangePythonFlake8ExePy2 call ChangePythonFlake8Exe("/usr/local/bin/python2")
    elseif executable("/usr/bin/python2")
        command! ChangePythonFlake8ExePy2 call ChangePythonFlake8Exe("/usr/bin/python2")
    else
        command! ChangePythonFlake8ExePy2 call ChangePythonFlake8Exe("python2")
    endif

    if executable("/usr/local/bin/python3")
        command! ChangePythonFlake8ExePy3 call ChangePythonFlake8Exe("/usr/local/bin/python3")
    elseif executable("/usr/bin/python3")
        command! ChangePythonFlake8ExePy3 call ChangePythonFlake8Exe("/usr/bin/python3")
    else
        command! ChangePythonFlake8ExePy3 call ChangePythonFlake8Exe("python3")
    endif

    command! ChangePythonFlake8ExePython call ChangePythonFlake8Exe("python")

    nnoremap <Leader>sp2 :ChangePythonFlake8ExePy2<CR>
    nnoremap <Leader>sp3 :ChangePythonFlake8ExePy3<CR>
    nnoremap <Leader>spp :ChangePythonFlake8ExePython<CR>
endif


runtime! ftplugin/man.vim


if isdirectory(expand("~/.vim/bundle/ctrlp.vim/"))
    nnoremap <Leader>bf :CtrlPBuffer<CR>
endif

if isdirectory(expand("~/.vim/bundle/syntastic/"))
    nnoremap <Leader>ss :SyntasticToggleMode<CR>
    nnoremap <Leader>sc :SyntasticCheck<CR>
    nnoremap <Leader>sr :SyntasticReset<CR>
endif


if has("autocmd") && exists("+omnifunc")
    autocmd Filetype *
        \if &omnifunc == "" |
        \setlocal omnifunc=syntaxcomplete#Complete |
        \endif
endif

inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <C-d>      pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
inoremap <expr> <C-u>      pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"

set completeopt=menu,preview,longest

set previewheight=3


if isdirectory(expand("~/.vim/bundle/YouCompleteMe/"))
    nnoremap <Leader>ya :YcmCompleter GoToDeclaration<CR>
    nnoremap <Leader>yg :YcmCompleter GoToDefinition<CR>
    nnoremap <Leader>yh :YcmCompleter GoToInclude<CR>
    nnoremap <Leader>yi :YcmCompleter GoToImprecise<CR>
    nnoremap <Leader>yt :YcmCompleter GoTo<CR>
    nnoremap <Leader>yf :YcmCompleter FixIt<CR>
    nnoremap <Leader>yp :YcmCompleter GetParent<CR>
    nnoremap <Leader>ytp :YcmCompleter GetType<CR>
    nnoremap <Leader>yd :YcmCompleter GetDoc<CR>
    nnoremap <Leader>yq :YcmCompleter GetDocQuick<CR>
    nnoremap <Leader>yr :YcmCompleter GoToReferences<CR>

    nnoremap <Leader>ypp :YcmCompleter RestartServer python<CR> :ChangePythonFlake8ExePython<CR>

    if executable("/usr/local/bin/python2")
        if isdirectory(expand("~/.vim/bundle/syntastic")) && executable("flake8")
            nnoremap <Leader>yp2 :YcmCompleter RestartServer /usr/local/bin/python2<CR> :ChangePythonFlake8ExePy2<CR>
        else
            nnoremap <Leader>yp2 :YcmCompleter RestartServer /usr/local/bin/python2<CR>
        endif
    elseif executable("/usr/bin/python2")
        if isdirectory(expand("~/.vim/bundle/syntastic")) && executable("flake8")
            nnoremap <Leader>yp2 :YcmCompleter RestartServer /usr/bin/python2<CR> :ChangePythonFlake8ExePy2<CR>
        else
            nnoremap <Leader>yp2 :YcmCompleter RestartServer /usr/bin/python2<CR>
        endif
    else
        if isdirectory(expand("~/.vim/bundle/syntastic")) && executable("flake8")
            nnoremap <Leader>yp2 :YcmCompleter RestartServer python2<CR> :ChangePythonFlake8ExePy2<CR>
        else
            nnoremap <Leader>yp2 :YcmCompleter RestartServer python2<CR>
        endif
    endif

    if executable("/usr/local/bin/python3")
        if isdirectory(expand("~/.vim/bundle/syntastic")) && executable("flake8")
            nnoremap <Leader>yp3 :YcmCompleter RestartServer /usr/local/bin/python3<CR> :ChangePythonFlake8ExePy3<CR>
        else
            nnoremap <Leader>yp3 :YcmCompleter RestartServer /usr/local/bin/python3<CR>
        endif
    elseif executable("/usr/bin/python3")
        if isdirectory(expand("~/.vim/bundle/syntastic")) && executable("flake8")
            nnoremap <Leader>yp3 :YcmCompleter RestartServer /usr/bin/python3<CR> :ChangePythonFlake8ExePy3<CR>
        else
            nnoremap <Leader>yp3 :YcmCompleter RestartServer /usr/bin/python3<CR>
        endif
    else
        if isdirectory(expand("~/.vim/bundle/syntastic")) && executable("flake8")
            nnoremap <Leader>yp3 :YcmCompleter RestartServer python3<CR> :ChangePythonFlake8ExePy3<CR>
        else
            nnoremap <Leader>yp3 :YcmCompleter RestartServer python3<CR>
        endif
    endif
endif


augroup onleaveall
    autocmd VimLeavePre * :pclose
    autocmd VimLeavePre * :cclose
augroup END


" Deps - do not remove
"
"UnBundle 'gmarik/vundle'
"UnBundle 'MarcWeber/vim-addon-mw-utils'
"UnBundle 'tomtom/tlib_vim'
"UnBundle 'mileszs/ack.vim'
"

" General
"
"UnBundle 'scrooloose/nerdtree'
"UnBundle 'altercation/vim-colors-solarized'
"UnBundle 'spf13/vim-colors'
UnBundle 'tpope/vim-surround'
UnBundle 'tpope/vim-repeat'
UnBundle 'rhysd/conflict-marker.vim'
"UnBundle 'jiangmiao/auto-pairs'
"UnBundle 'ctrlpvim/ctrlp.vim'
"UnBundle 'tacahiroy/ctrlp-funky'
UnBundle 'terryma/vim-multiple-cursors'
"UnBundle 'vim-scripts/sessionman.vim'
UnBundle 'matchit.zip'
"UnBundle 'vim-airline/vim-airline'
"UnBundle 'vim-airline/vim-airline-themes'
UnBundle 'powerline/fonts'
UnBundle 'bling/vim-bufferline'
"UnBundle 'easymotion/vim-easymotion'
"UnBundle 'jistr/vim-nerdtree-tabs'
"UnBundle 'flazz/vim-colorschemes'
UnBundle 'mbbill/undotree'
UnBundle 'nathanaelkane/vim-indent-guides'
UnBundle 'vim-scripts/restore_view.vim'
"UnBundle 'mhinz/vim-signify'
UnBundle 'tpope/vim-abolish.git'
UnBundle 'osyo-manga/vim-over'
"UnBundle 'kana/vim-textobj-user'
"UnBundle 'kana/vim-textobj-indent'
UnBundle 'gcmt/wildfire.vim'
"

" Writing
"
UnBundle 'reedes/vim-litecorrect'
UnBundle 'reedes/vim-textobj-sentence'
UnBundle 'reedes/vim-textobj-quote'
UnBundle 'reedes/vim-wordy'
"

" General Programming
"
"UnBundle 'scrooloose/syntastic'
"UnBundle 'tpope/vim-fugitive'
UnBundle 'mattn/webapi-vim'
UnBundle 'mattn/gist-vim'
UnBundle 'scrooloose/nerdcommenter'
UnBundle 'tpope/vim-commentary'
"UnBundle 'godlygeek/tabular'
UnBundle 'luochen1990/rainbow'
"UnBundle 'majutsushi/tagbar'
"

" Snippets & AutoComplete
"
UnBundle 'Shougo/neocomplete.vim.git'
UnBundle 'Shougo/neosnippet'
UnBundle 'Shougo/neosnippet-snippets'
"UnBundle 'Valloric/YouCompleteMe'
"UnBundle 'SirVer/ultisnips'
"UnBundle 'honza/vim-snippets'
"

" PHP
"
UnBundle 'spf13/PIV'
UnBundle 'arnaud-lb/vim-php-namespace'
UnBundle 'beyondwords/vim-twig'
"

" Python
UnBundle 'klen/python-mode'
UnBundle 'yssource/python.vim'
UnBundle 'python_match.vim'
UnBundle 'pythoncomplete'
"

" Javascript
"
UnBundle 'elzr/vim-json'
UnBundle 'groenewege/vim-less'
UnBundle 'pangloss/vim-javascript'
UnBundle 'briancollins/vim-jst'
UnBundle 'kchmck/vim-coffee-script'
"

" Haskell
"
if count(g:spf13_bundle_groups, 'haskell')
    UnBundle 'travitch/hasksyn'
    UnBundle 'dag/vim2hs'
    UnBundle 'Twinside/vim-haskellConceal'
    UnBundle 'Twinside/vim-haskellFold'
    "UnBundle 'lukerandall/haskellmode-vim'
    "UnBundle 'eagletmt/neco-ghc'
    "UnBundle 'eagletmt/ghcmod-vim'
    "UnBundle 'Shougo/vimproc.vim'
    UnBundle 'adinapoli/cumino'
    UnBundle 'bitc/vim-hdevtools'
else
    UnBundle 'travitch/hasksyn'
    UnBundle 'dag/vim2hs'
    UnBundle 'Twinside/vim-haskellConceal'
    UnBundle 'Twinside/vim-haskellFold'
    UnBundle 'lukerandall/haskellmode-vim'
    UnBundle 'eagletmt/neco-ghc'
    UnBundle 'eagletmt/ghcmod-vim'
    UnBundle 'Shougo/vimproc.vim'
    UnBundle 'adinapoli/cumino'
    UnBundle 'bitc/vim-hdevtools'
endif
"

" HTML
"
UnBundle 'amirh/HTML-AutoCloseTag'
"UnBundle 'hail2u/vim-css3-syntax'
"UnBundle 'gorodinskiy/vim-coloresque'
UnBundle 'tpope/vim-haml'
UnBundle 'mattn/emmet-vim'
"

" Ruby
"
UnBundle 'tpope/vim-rails'
"

" Misc
"
"UnBundle 'rust-lang/rust.vim'
UnBundle 'tpope/vim-markdown'
UnBundle 'spf13/vim-preview'
UnBundle 'tpope/vim-cucumber'
UnBundle 'cespare/vim-toml'
UnBundle 'quentindecock/vim-cucumber-align-pipes'
UnBundle 'saltstack/salt-vim'
"

" Customized
"
"UnBundle 'filfirst/Monota'
"UnBundle 'filfirst/nerdtree-git-plugin'
"UnBundle 'octol/vim-cpp-enhanced-highlight'
"UnBundle 'pboettch/vim-cmake-syntax'
UnBundle 'DfrankUtil'
UnBundle 'vimprj'
UnBundle 'indexer.tar.gz'

if executable("R")
    "UnBundle 'jalvesaq/Nvim-R'
endif

if executable("swift")
    "UnBundle 'keith/swift.vim'
endif

if filereadable(expand("~/.vimrc.self"))
    source ~/.vimrc.self
endif
