let g:spf13_bundle_groups = ['general', 'youcompleteme', 'programming', 'html', 'misc',]

if executable("ghc")
    call add(g:spf13_bundle_groups, 'haskell')
endif

let g:spf13_no_easyWindows = 1
let g:spf13_no_wrapRelMotion = 1
let g:spf13_no_fastTabs = 1
let g:spf13_no_keyfixes = 1

let g:spf13_map_cr_omni_complete = 1
let g:spf13_no_autochdir = 1
let g:spf13_no_conceal = 1
let g:spf13_keep_trailing_whitespace = 1
let g:spf13_leader='\'
let g:airline_skip_empty_sections = 1
"let g:indent_guides_enable_on_vim_startup=0
let g:AutoPairsMultilineClose = 0

if isdirectory(expand("~/.vim/bundle/Monota"))
    let g:monotaDarkColorScheme = "Monota"
    let g:monotaLightColorScheme = "MonotaLight"
endif


if isdirectory(expand("~/.vim/bundle/syntastic"))
    "let g:syntastic_mode_map = {'mode': 'passive'}

    if has("macunix")
        let g:syntastic_cpp_compiler = "clang++"
    endif

    let g:syntastic_cpp_compiler_options="-std=c++14"
    let g:syntastic_cpp_include_dirs = ["/usr/local/include"]
    let g:syntastic_cpp_auto_refresh_includes = 1

    if has("macunix")
        let g:syntastic_c_compiler = "clang"
    endif

    let g:syntastic_c_compiler_options="-std=c99"
    let g:syntastic_c_include_dirs = ["/usr/local/include"]
    let g:syntastic_c_auto_refresh_includes = 1

    if executable("flake8")
        let g:syntastic_python_checkers = ["flake8"]
    endif

    "if isdirectory(expand("~/.vim/bundle/swift.vim")) && executable("swift")
    "    let g:syntastic_swift_checkers = ['swiftpm']
    "endif
endif


if isdirectory(expand("~/.vim/bundle/nerdtree-git-plugin"))
    let g:NERDTreeIndicatorMapCustom = {
        \ "Modified"  : "*",
        \ "Staged"    : "+",
        \ "Untracked" : "?",
        \ "Renamed"   : "=",
        \ "Unmerged"  : "!",
        \ "Deleted"   : "-",
        \ "Dirty"     : "x",
        \ "Clean"     : "v",
        \ "Unknown"   : "#"
        \ }
endif


if isdirectory(expand("~/.vim/bundle/vim-signify"))
    let g:signify_sign_add               = '+'
    let g:signify_sign_delete            = '-'
    let g:signify_sign_change            = '*'
endif


if isdirectory(expand("~/.vim/bundle/YouCompleteMe"))
    "let g:ycm_auto_trigger = 0
    let g:ycm_global_ycm_extra_conf = '~/.spf13-vim.local/ycm_extra_conf.py'
    let g:ycm_collect_identifiers_from_tags_files = 1
    let g:ycm_confirm_extra_conf = 0
    "let g:ycm_show_diagnostics_ui = 0
    let g:ycm_max_diagnostics_to_display = 1000
    let g:ycm_disable_for_files_larger_than_kb = 10000
    if isdirectory(expand("~/opt/rust/rustc/"))
        let g:ycm_rust_src_path = expand("~/opt/rust/rustc/src")
    endif
    if isdirectory(expand("~/.vim/bundle/neco-ghc"))
        let g:ycm_semantic_triggers = {'haskell' : ['.']}
    endif
endif

if isdirectory(expand("~/.vim/bundle/indexer.tar.gz"))
    let g:indexer_ctagsCommandLineOptions="--c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q"
    let g:indexer_disableCtagsWarning = 1
endif

if isdirectory(expand("~/.vim/bundle/vim2hs"))
    let g:haskell_conceal = 0
endif

if isdirectory(expand("~/.vim/bundle/haskellmode-vim"))
    if has("macunix")
        let g:haddock_browser = 'open'
        let g:haddock_browser_callformat = '%s %s'
    elseif has("unix")
        " TODO
    else
        " Use default
    endif
    " Should add following to enable some feature, but it conflict
    " with neco-ghc
    "au BufEnter *.hs compiler ghc
endif

if isdirectory(expand("~/.vim/bundle/tagbar"))
    let g:tagbar_autofocus = 1
    let g:tagbar_iconchars = ['▸', '▾']
endif

if isdirectory(expand("~/.vim/bundle/tagbar")) && executable("hasktags")
    let g:tagbar_type_haskell = {
        \ 'ctagsbin'  : 'hasktags',
        \ 'ctagsargs' : '-x -c -o-',
        \ 'kinds'     : [
            \  'm:modules:0:1',
            \  'd:data: 0:1',
            \  'd_gadt: data gadt:0:1',
            \  't:type names:0:1',
            \  'nt:new types:0:1',
            \  'c:classes:0:1',
            \  'cons:constructors:1:1',
            \  'c_gadt:constructor gadt:1:1',
            \  'c_a:constructor accessors:1:1',
            \  'ft:function types:1:1',
            \  'fi:function implementations:0:1',
            \  'o:others:0:1'
        \ ],
        \ 'sro'        : '.',
        \ 'kind2scope' : {
            \ 'm' : 'module',
            \ 'c' : 'class',
            \ 'd' : 'data',
            \ 't' : 'type'
        \ },
        \ 'scope2kind' : {
            \ 'module' : 'm',
            \ 'class'  : 'c',
            \ 'data'   : 'd',
            \ 'type'   : 't'
        \ }
    \ }
endif


if filereadable(expand("~/.vimrc.before.self"))
    source ~/.vimrc.before.self
endif
